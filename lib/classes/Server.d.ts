/// <reference types="node" />
import { ChatInputCommandInteraction, Collection, Guild, GuildChannel, Message } from 'discord.js';
import { GuildDataBaseModel, SuggestChannelObject, ApiCommand } from '../utils/classes.js';
import { PunishUser } from '../utils/utils.js';
export declare class Server {
    #private;
    autoroles: Collection<string, Set<string>>;
    rejectSug(id: string): void;
    aceptSug(id: string): void;
    private _emojiAnalisisEnabled;
    guild: Guild;
    db: FirebaseFirestore.DocumentReference<FirebaseFirestore.DocumentData>;
    suggestChannels: SuggestChannelObject[];
    private _lastSuggestId;
    logsChannels: {
        messageUpdate?: string;
        messageDelete?: string;
        attachment?: string;
        invite?: string;
        memberUpdate?: string;
        sanction?: string;
    };
    keepRoles: boolean;
    blacklistedWords: string[];
    disabledChannels: string[];
    birthday: {
        channel?: string;
        message?: string;
    };
    premium: boolean;
    emojiStatistics: any;
    emojiTimeout?: NodeJS.Timer;
    constructor(guild: Guild);
    init(): Promise<any>;
    syncDB(dataPriority?: boolean): Promise<any>;
    toDBObject(toPublic?: boolean): GuildDataBaseModel;
    get lastSuggestId(): number;
    set lastSuggestId(n: number);
    get emojiAnalisisEnabled(): boolean;
    get prefixes(): string[];
    set prefixes(value: string[]);
    getPrefixes(onlyDeclared?: boolean): string[];
    setPrefix(prefix: string): void;
    addPrefix(prefix: string): void;
    removePrefix(prefix: string): void;
    get lang(): string;
    setSuggestChannel(channel: GuildChannel): void;
    addSuggestChannel(suggestChannelObject: SuggestChannelObject): void;
    removeSuggestChannel(idToRemove: string): void;
    private updateChannelsLogsInDB;
    setMessageUpdateLog(channel: string): void;
    removeMessageUpdateLog(): void;
    setMessageDeleteLog(channel: string): void;
    removeMessageDeleteLog(): void;
    setAttachmentLog(channel: string): void;
    removeAttachmentLog(): void;
    translate(phrase: string, params?: object): string;
    setBirthdayChannel(birthdayChannel: string): void;
    setBirthdayMessage(birthdayMessage: string): void;
    removeBirthdayChannel(): void;
    removeBirthdayMessage(): void;
    startEmojiAnalisis(): void;
    stopEmojiAnalisis(): void;
    emojiAnalisis(msg: Message): void;
    newAutorol(name: string): Promise<FirebaseFirestore.WriteResult>;
    addAutorol(name: string, id: string): Promise<FirebaseFirestore.WriteResult> | undefined;
    removeAutorolRol(name: string, id: string): Promise<FirebaseFirestore.WriteResult> | undefined;
    removeAutorol(name: string): Promise<FirebaseFirestore.WriteResult> | undefined;
    setInviteChannel(inviteChannel: string): void;
    setMemberUpdateChannel(memberUpdateChannel: string): void;
    removeMemberUpdateLog(): void;
    removeInviteChannelLog(): void;
    setKeepRoles(keepRoles: boolean): void;
    addBlacklistedWord(word: string): void;
    removeBlacklistedWord(word: string): void;
    addDisabledChannel(channelID: string): void;
    removeDisabledChannel(channelID: string): void;
    setSanctionChannel(channelID: string): void;
    removeSanctionChannel(): void;
    punishUser({ userId, type, reason, duration, moderatorId }: PunishUser): Promise<unknown>;
    private warnUser;
    private muteUser;
    private kickUser;
    private banUser;
    private hackbanUser;
    sendSuggestion(interaction: ChatInputCommandInteraction<'cached'> | Message<true>): void;
    createCommands(commands: ApiCommand[]): Promise<void>;
}
